Task # 1:
    + 1) Написать CRUD приложение. Использовать Tomcat, Maven, JSP, сервлеты, JDBC.
	+ 2) Должен быть класс User  с произвольными полями (id, name и т.п.)
	+ 3) В приложении должна быть страница на которую выводятся все юзеры с возможностью добавлять, удалять и изменять юзера.
	+ 4) Конфигурация сервлетов через аннотации.
Links:
	JSP: http://java-course.ru/student/book1/jsp/
	JDBC: https://habr.com/ru/post/101342/
Order:
    + 1) Ну я бы сделал так , подключить томкат
    + 2) Создавть просто сервлет посмотреть все ли ок
    + 3) Потом подключиться к базе данных
    + 4) Проверить все ли получается
    5) Ну и дальше сделать все что тебя просят
Questions:

Reworking list 1:
    + 1)Убрать из гитхаба ненужные папки такие например как idea, которых не должно быть
    + 2)Удалить Main
    + 3)resp.getWriter().println("User add successful"); вот это вот все убрать и что-то похожее
    + 4)В моделях сейчас не должно быть никаких аннотаций ты работаешь c JDBC (edited)
    + 5)Работаем полностью без xml т.е. его надо удалить
    + 6)Тоже самое с метаинф и xml там
    7)Внутри jsp не должно быть никакого кода, кроме кода html и jstl тегов, но никакого java кода
    + 8)У тебя всего должно быть 2 jsp файла , один для всех людей которых ты выводишь на экран + добавление внизу таблицы, второй для обновления юзера
    + 9)Все конекшен через JDBC
Reworking list 2:
    1)Reworking list 1-7
    + 2)именование пакетов с маленькой буквы
    + 3)В сервисе не должно быть подключения к базе, подключение вынести в отдельный пакет и класс
    + 4)Интерфейсы для дао и сервиса
    -/+5)Убрать все комментарии из кода
    + 6)В сервлетах не дублировать код
    + 7)Убрать конфигурацию с Hibernate
Reworking list 3:
    + 1)Переменная не может называться просто "c" - UserDaoimpl;
    -/+ (можно и короче) 2)Во всех методах должны быть транзакции. Транзакции должны работать в случае возникновения ошибок и откатывать изменения, внесённые в базу;
    + 3)Вот таких строчек быть не должно. UserDao должен быть полем в сервисе, и ни в коем случае он не должен создаваться всякий раз, когда сервис принимает запрос
      src/main/java/service/UserServiceImpl.java (Line 13);
    + 4)Не должно быть пробелов в названии параметров
      src/main/java/servlets/AddUserServlet.java (Lines 17-19);
    + 5)То же самое: сервис должен быть полем севрелета, а не создаваться новый на каждый запрос. подумай, сколько этих сервисов будет создано, если мы добавим 10к пользователей
      src/main/java/servlets/AddUserServlet.java (Line 21);
    + 6)То же самое. для всех сервлетов
      src/main/java/servlets/AllUsersServlet.java (Line 18);
    ?+ 7)Нельзя отдавать страницу после отправки post запроса. страницу может отдавать только get запрос. после post запроса надо делать редирект get
      src/main/java/servlets/AddUserServlet.java (Line 26);
    ?+ 8)То же самое - тут нужен редирект
      src/main/java/servlets/DeleteUserServlet.java (Line 23)
      src/main/java/servlets/EditUserServlet.java (Line 32);
    + 9)Тут вообще жестко захардкожено всё. у тебя вообще не правильная структура проекта. посмотри, как должна выглядеть структура maven проекта. нет папки resources нет папки webapp. это надо исправить
      далее: в папке resouces у тебя должен быть файл .property, в котором ты как раз и опишешь все что нужно для подключения к базе данных. пароль, порт и т.д.
      из этого файла надо будет посто читать нужные параметры. создай класс PropertyReader, с единственным статическим методом getProperty, который будет принимать строку с названием проперти и возвращать её значение
      src/main/java/util/DBHelper.java (Lines 16-32);
    + 10)Используй в запросах capslock
       src/main/java/dao/UserDaoImpl.java (Line 35);
Pre-project education structure:
    ТЕМА №1 Разработка web-сервиса с использованием технологий Tomcat, Servlet, JSP, Maven , JDBC + паттерн проектирования Executor.
    ТЕМА №2 Добавление в проект JPA, Hibernate. Применение паттернов Factory, Singletone.
    ТЕМА №3 Добавление RBAC (Role Based Access Control), разделение по ролям, контроль доступности ресурсов для администратора и пользователя. Использование технологии Servlet Filters.
    ТЕМА №4 Знакомство с Spring Core, перевод проекта с Servlet на Spring MVC. Конфигурирование Spring для работы с ORM (Hibernate).
    ЗАДАЧА №5 Подключение Spring Security вместо Servlet Filters. Настройка конфигурации безопасности web-приложения.
    ТЕМА №6 Подключение фреймворка Bootstrap для создания адаптивных web страниц.
    ТЕМА №7 Перевод проекта на Spring Boot с использованием шаблонизатора Thymeleaf.
    ТЕМА №8 Создание RESTful сервиса с использованием технологий Spring REST. Построение грамотной REST архитектуры.
    ТЕМА №9 Разработка клиента (пользователя) рестфул сервиса с использованием технологий Spring REST Template.
